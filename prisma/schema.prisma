generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  menus         Menu[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Menu {
  id            String         @id @default(uuid())
  originalUrl   String        // 原始菜单图片URL
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  status        MenuStatus    @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  menuItems     MenuItem[]
  error         String?       // 如果处理失败，存储错误信息
}

model MenuItem {
  id             String    @id @default(uuid())
  menuId         String
  menu           Menu      @relation(fields: [menuId], references: [id])
  name           String
  price          String
  description    String
  imageUrl       String?   // Together AI 生成的图片URL
  animationUrl   String?   // RunwayML 生成的动画URL
  audioUrl       String?   // OpenAI 生成的音频URL
  synthesizedUrl String?   // 合成后的视频URL
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

enum MenuStatus {
  PENDING
  PROCESSING_IMAGES
  PROCESSING_VIDEOS
  PROCESSING_AUDIO
  PROCESSING_SYNTHESIS
  COMPLETED
  FAILED
} 